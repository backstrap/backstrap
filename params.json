{"name":"Backstrap","tagline":"The Backstrap JavaScript library provides a layer of functionality tying together Bootstrap and Backbone.","body":"Backstrap\r\n=========\r\n\r\n**UNDER CONSTRUCTION. VERSION 1.0 COMING SOON!**\r\n\r\nNeed something meaty to go between the MVC backbone and the UI skin\r\nof your client-side JavaScript app?\r\nLook no further, you've found it: Backstrap!\r\n\r\nThe Backstrap JavaScript library provides a layer of functionality\r\ntying together [Bootstrap][] and [Backbone][].\r\nIf you're wondering why that's such a great idea,\r\ntake a look at this article by Christophe Coenraets:\r\n[Sample Application with Backbone.js and Twitter Bootstrap][coenraets].\r\n\r\nBackstrap is available on [GitHub][]\r\nand as a Composer component on [packagist.org][packagist].\r\nThe project depends on Backbone, Bootstrap, jQuery and Underscore.\r\nUnless you've built your own Bootstrap theme, you'll also want to\r\nuse the [bootstrap-default][] theme.\r\nJust add `\"components/bootstrap-theme\": \"~3.0\"` to your composer.json \"require\".\r\n\r\nThe core Backstrap object is based heavily on\r\nJoe Stelmach's nifty [laconic.js][laconic] package.\r\n(\"Laconic simplifies the generation of DOM content.\")\r\nIt also extends [Backbone-UI][] and enhances\r\nthe Backbone-UI components with Bootstrap-awareness.\r\n\r\nTo all of that we've added a natural syntax for making\r\nbasic Bootstrap-aware DOM objects,\r\nincluding Bootstrap's sizing and context-coloring features;\r\nautomatic use of Bootstrap class names;\r\nmethods for making complex widgets like\r\ngrids, navbars, button-groups, forms.\r\n\r\nIn non-CommonJS environments, Backstrap defines the global namespace `$$`.\r\nIt provides a `noConflict()` method to revert the definition of `$$` if needed.\r\n\r\nBackstrap was originally forked from\r\nlaconic commit [b7f4861a96][]\r\nand Backbone-UI commit [ece3ea14d7][].\r\n\r\nSample suggested use:\r\n\r\n\t$$.div(\r\n\t\t$$.span({context: 'danger'},\r\n\t\t\t'Uh-oh! ',\r\n\t\t\t$$.glyph('star')\r\n\t\t),\r\n\t\t$$.button({size: 'large'}, 'OK')\r\n\t);\r\n\r\n\r\nwhich produces the DOM tree represented by this HTML code:\r\n\r\n\t<div>\r\n\t  <span class=\"text-danger\">\r\n\t    Uh-oh! <span class=\"glyphicon glyphicon-star\"></span>\r\n\t  </span>\r\n\t  <button class=\"btn btn-lg\">OK</button>\r\n\t</div>\r\n\r\n[bootstrap]:   http://getbootstrap.com/ \"Bootstrap Homepage\"\r\n[backbone]:    http://backbonejs.org/ \"Backbonejs Homepage\"\r\n[coenraets]:   http://coenraets.org/blog/2013/04/sample-application-with-backbone-js-and-twitter-bootstrap-updated-and-improved/ \"Christophe Coenraets Blog\"\r\n[github]:      https://github.com/backstrap/backstrap \"Backstrap on GitHub\"\r\n[packagist]:   https://packagist.org/packages/backstrap/backstrap \"Backstrap on Packagist\"\r\n[laconic]:     https://github.com/joestelmach/laconic \"Laconic on GitHub\"\r\n[lacLicense]:  https://github.com/joestelmach/laconic/blob/master/LICENSE \"Laconic License\"\r\n[backbone-ui]: https://github.com/perka/backbone-ui \"Backbone-UI on GitHub\"\r\n[bbuiLicense]: https://github.com/perka/backbone-ui/blob/master/LICENSE \"Backbone-UI License\"\r\n[b7f4861a96]:  https://github.com/joestelmach/laconic/commit/b7f4861a96153c213569ac8aa537e94312c71ce8\r\n[ece3ea14d7]:  https://github.com/perka/backbone-ui/commit/ece3ea14d71bf1bc8f8a0ce01103d74bfe29a10f\r\n[bootstrap-default]:   https://github.com/components/bootstrap-default \"Bootstrap Default Theme on GitHub\"\r\n\r\n\r\n## Detailed usage\r\n\r\nSee the [laconic doc](http://joestelmach.github.io/laconic/)\r\nfor a description of laconic.\r\n(I really should reproduce some of that information here.)\r\nEverything there pretty much applies here, with the following changes:\r\n\r\n- Backstrap defines the global namespace `$$` instead of laconic's `$.el`.\r\n- if you pass a \"size\" attribute\r\nit will be converted into a suitable Bootstrap classname.\r\n- if you pass a \"context\" or \"bgcontext\" attribute\r\nit will be converted into a suitable Bootstrap classname.\r\n- if you pass a \"glyph\" attribute\r\nit will be converted into a suitable Bootstrap classname.\r\nUse just the distinct part of the Bootstrap glyphicon class,\r\ne.g. `$$.span({glyph: \"star\"})` becomes `<span class=\"glyphicon glyphicon-star\">`.\r\n- there is a shortcut method `$$.glyph(name)` for creating glyphs.\r\n`$$.glyph(\"star\")` is equivalent to `$$.span({glyph: \"star\"})`.\r\n- there are some new pseudo-tags, such as\r\n`$$.badge()` to create a span with class=\"badge\";\r\n`$$.grid()` to create a `div` with a pre-built grid layout.\r\n- various tags get extra decoration, for instance `$$.button()`\r\nautomatically adds the Bootstrap \"btn\" class to your button.\r\nNote that this is the only supported way to build buttons -\r\nyou should avoid doing, for example, `$$.a({className: \"btn\"})`.\r\nThe term \"label\" is overloaded, since there is both an HTML label tag and\r\na Bootstrap label class. See the [label](#label) section below for details\r\non how to use labels.\r\n- there are also constructors for building various Bootstrap.View extensions,\r\nwhich allow you to make Backbone Model-bound widgets that are also\r\nBootstrap-enabled. For instance `$$.BasicNavbar()` which creates a navbar\r\nwhose contents are built from a description provided as a Backbone Collection.\r\n\r\nBackstrap, like laconic, adds an `appendTo()` convenience method\r\nto each DOM object it creates.\r\n\r\n\r\n### HTML Tags\r\n\r\nEach HTML5 tag has a factory function in the `$$` namespace.\r\n(Some deprecated HTML4 tags are also available.)\r\nSome additional functions which build Bootstrap-enabled tags\r\nhave also been included.\r\nAll these methods should be invoked with a variable-length list of\r\nchild elements, strings, numbers, or arrays containing these types.\r\nAn optional attributes object may be passed as the first argument.\r\nMost attributes get applied directly to the created object as HTML attributes;\r\nthere are a few special attributes which undergo further processing\r\n(see [Bootstrap Attributes](#attrs) below.)\r\nFor example: \r\n\r\n\t$$.div({'class' : 'example'}, \r\n\t\t$$.div('content'));\r\n\r\nIn some cases, there is a Bootstrap component name that is the same as an HTML tag name.\r\nTo work around this conflict, we make all the plain HTML tag methods accessible in the\r\n`$$.plain` namespace.  Thus for instance in the case of \"label\", `$$.label()` will give you\r\na fully Bootstrapped `<label class=\"label\">`,\r\nwhile `$$.plain.label()` will give you a plain HTML `<label>`.\r\nOverloaded names include: button, form, input, label, table.\r\n\r\n### Bootstrap Tags\r\n\r\nThe special Bootstrap methods are:\r\n\r\n#### alert\r\n\r\nThe `$$.alert()` method creates a `div` tag decorated with the Bootstrap \"alert\" class.\r\n\r\n#### badge\r\n\r\nThe `$$.badge()` method creates a `span` tag decorated with the Bootstrap \"badge\" class.\r\n\r\n#### breadcrumb\r\n\r\nThe `$$.breadcrumb()` method creates an `ol` tag decorated with the Bootstrap \"breadcrumb\" class.\r\n\r\n#### button\r\n\r\nThe `$$.button()` method creates an HTML `button` tag decorated with the Bootstrap \"btn\" class,\r\nand optionally with \"btn-*\" classes for sizing and context.\r\n\r\n`$$.plain.button()` gives you a bare HTML `button` tag.\r\n\r\n#### buttonGroup\r\n\r\nThe `$$.buttonGroup()` method creates a `div` tag decorated with the Bootstrap \"btn-group\" class.\r\n\r\n#### buttonToolbar\r\n\r\nThe `$$.buttonToolbar()` method creates a `div` tag decorated with the Bootstrap \"btn-toolbar\" class and \"toolbar\" role.\r\n\r\n#### container\r\n\r\nThe `$$.container()` method creates a `div` tag decorated with the Bootstrap \"container\" class,\r\nand optionally with the \"container-fluid\" class for fluid layout.\r\n\r\n#### css\r\n\r\nThe `$$.css(url)` method is a shortcut for creating CSS stylesheet links.\r\nIt creates an HTML `<link rel=\"stylesheet\" type=\"text/css\" href=\"url\">` tag.\r\nUse it to load CSS from within your JS code, thus:\r\n\r\n\t$('head').append($$.css(url));\r\n\r\n#### form\r\n\r\nThe `$$.form()` method creates a `form` tag decorated with the attribute 'role=\"form\"'.\r\n\r\n#### formGroup\r\n\r\nThe `$$.formGroup()` method creates a `div` tag decorated with the Bootstrap \"form-group\" class.\r\nUse it to group form inputs with their labels, inside a form.\r\n\r\n#### glyph\r\n\r\nThe `$$.glyph(name)` method creates a `span` tag decorated with the Bootstrap \"glyphicon\" and \"glyphicon-{name}\" classes.\r\n\r\n#### grid\r\n\r\nThe `$$.grid()` method creates a nested set of divs. Pass it a \"layout\" attribute\r\nin the attributes argument to format the grid. The \"layout\" attribute should contain\r\nan array of arrays of cell specifications. Each cell specification can be either\r\na simple integer specifying the width (in columns) of the cell, or an object\r\nwith properties for each device-size for which you want to set a column width.\r\nUse either Bootstrap's short names (\"lg\", \"sm\") or full names (\"large\", \"small\").\r\nIt may also contain a \"content\" property containing a DOM object to use as\r\nthe contents of the cell. For example:\r\n\r\n\t$$.grid({layout: [\r\n\t\t[ 6, 6 ],\r\n\t\t[ { xs: 12, md: 6, content: $$.div('Hello, World') } ]\r\n\t]});\r\n\r\nPass grid a \"fluid: true\" attribute to get a fluid layout (using Bootstrap's\r\n\"container-fluid\" class instead of \"container\" on the top-level div).\r\n\r\nWe also add a few convenience methods on the top-level div:\r\nappendRows(layout), appendRow(layout), getRow(rowNum), and getCell(rowNum, colNum).\r\nFor example:\r\n\r\n\tvar grid = $$.grid({layout: [ [ 6, 6 ] ]});\r\n\tgrid.appendRow([ 4, 4, 4 ]);\r\n\tgrid.getCell(2, 2).append('Hello World');\r\n\r\nputs \"Hello World\" in the middle cell of the second row.\r\n\r\n#### input\r\n\r\nCreates an HTML `input` tag decorated with the Bootstrap \"form-control\" class,\r\nand optionally with \"input-*\" classes for sizing and context.\r\n\r\n#### inputGroup\r\n\r\nThe `$$.inputGroup()` method creates a `div` tag decorated with the Bootstrap \"input-group\" class.\r\n\r\n#### inputGroupAddon\r\n\r\nThe `$$.inputGroupAddon()` method creates a `span` tag decorated with the Bootstrap \"input-group-addon\" class.\r\n\r\n#### jumbotron\r\n\r\nThe `$$.jumbotron()` method creates a `div` tag decorated with the Bootstrap \"jumbotron\" class.\r\n\r\n<span id=\"label\"></span>\r\n#### label\r\n\r\nThe term \"label\" is, unfortunately, overloaded. The following methods are available:\r\n\r\n- `$$.label()` gives you an HTML `label` tag decorated with the Bootstrap \"label\" class.\r\n- `$$.spanLabel()` gives you an HTML `span` tag decorated with the Bootstrap \"label\" class.\r\n- `$$.plain.label()` gives you a bare HTML `label` tag.\r\n\r\n#### linkList\r\n\r\nThe `$$.linkList()` method creates a `div` tag decorated with the Bootstrap \"list-group\" class,\r\nto implement a Bootstrap \"linked item list group\".\r\nIt should be populated with `$$.linkListItem()'s`.\r\n\r\n#### linkListItem\r\n\r\nThe `$$.linkListItem()` method creates an `a` tag decorated with the Bootstrap \"list-group-item\" class.\r\nIt should be used with `$$.linkList()`.\r\n\r\n#### list\r\n\r\nThe `$$.list()` method creates a `ul` tag decorated with the Bootstrap \"list-group\" class,\r\nto implement a Bootstrap \"list group\".\r\nIt should be populated with `$$.listItem()'s`.\r\n\r\n#### listItem\r\n\r\nThe `$$.listItem()` method creates an `li` tag decorated with the Bootstrap \"list-group-item\" class.\r\nIt should be used with `$$.list()`.\r\n\r\n#### media\r\n\r\nThe `$$.media()` method creates a `div` tag decorated with the Bootstrap \"media\" class.\r\nPassit a DOM object as its \"media\" attribute, and an optional 'pull: \"right\"'\r\nif you want it pulled right instead of left.\r\nIts body will be further wrapped in a div with class \"media-body\".\r\n\r\n#### noConflict\r\n\r\nProvides a mechanism for reverting the definition of `$$`.\r\nBackstrap will attempt to register itself as a CommonJS module.\r\nBut when that functionality is not available\r\nit defines the global `$$` instead.\r\nIt is possible that your app would want to include\r\nsome other package that also uses the global `$$`.\r\nIn this case, load the Backstrap package after the other package;\r\nyou can then use `$$.noConflict()` to define some other variable\r\nto hold the Backstrap object,\r\nand revert the definition of `$$` back to the other package.\r\nFor example:\r\n\r\n\tvar Backstrap = $$.noConflict();\r\n\r\nNow `$$` is whatever it was before you loaded Backstrap,\r\nand you can use the variable `Backstrap` to access the Backstrap methods.\r\nYou might want to pick a shorter variable name, like `$b`.\r\n\r\n#### pagination\r\n\r\nThe `$$.pagination()` method creates a `ul` tag decorated with the Bootstrap \"pagination\" class.\r\n\r\n#### panel\r\n\r\nThe `$$.panel()` method creates a `div` tag decorated with the Bootstrap \"panel-body\" class,\r\nwrapped in a `div` decorated with the Bootstrap \"panel\" class.\r\nPass it DOM objects in either the \"heading\" or \"footer\" attributes\r\nto embed them within a `div` with the Bootstrap \"panel-heading\" or \"panel-footer\" class.\r\n\r\n#### pageHeader\r\n\r\nThe `$$.pageHeader()` method creates a `div` tag decorated with the Bootstrap \"page-header\" class.\r\n\r\n#### thumbnail\r\n\r\nThe `$$.thumbnail()` method creates a `div` tag decorated with the Bootstrap \"thumbnail\" class.\r\n\r\n#### well\r\n\r\nThe `$$.well()` method creates a `div` tag with class \"well\",\r\nto make Bootstrap's simple well effect.\r\n\r\n\r\n<span id=\"attrs\"></span>\r\n### Bootstrap attributes\r\n\r\nWe define a few special attributes that can be passed to\r\nmost tag factory functions, to handle certain Bootstrap formatting features.\r\n\r\n#### bgcontext\r\n\r\nSets the \"bg-*\" background context-coloring class on the object.\r\nContexts defined by Bootstrap are\r\n\"default\", \"primary\", \"info\", \"success\", \"warning\", and \"danger\".\r\nFor example:\r\n\r\n\t$$.span({bgcontext: 'warning'})\r\n\r\n#### context\r\n\r\nSets the appropriate context-coloring class on the object.\r\n\"text-*\", \"btn-*\", \"label-*\", etc.\r\nContexts defined by Bootstrap are\r\n\"default\", \"primary\", \"info\", \"success\", \"warning\", and \"danger\".\r\nAlso \"text-muted\" and \"btn-link\".\r\nFor example:\r\n\r\n\t$$.button({context: 'info'})\r\n\r\n#### size\r\n\r\nSets the appropriate Bootstrap sizing class on the object.\r\nSupported size names are \"large\" or \"lg\", \"small\" or \"sm\", and \"xs\" or \"extra-small\".\r\nFor example:\r\n\r\n\t$$.button({size: 'large'})\r\n\r\n\r\n### Components\r\n\r\nThe tag factory functions described above give you\r\nan easy way to build nice static content.\r\nBut here's where things get even more fun!\r\nThe Backstrap object also provides constructors for several\r\ncomponent classes that extend `Backbone.View`, to give you powerful\r\n(and good-looking!) data-driven, model-bound DOM widgets,\r\nusing the power of Backbone-UI.\r\n\r\nThe components are bound to either a Backbone Model or Collection.\r\nThe components then automatically re-render when the bound model\r\ndata changes.\r\n\r\nFor efficiency, you should use the factory functions, like `$$.glyph()`,\r\nfor static graphics. Use the object constructors, like `$$.Glyph()`,\r\nto bind a graphic object to a data model whose values may change\r\nover the life of the page.\r\n\r\n#### Badge\r\n\r\nCreates a Bootstrap badge (a `span` tag with class=\"badge\") whose content is model-bound.\r\nGive it a Model object and the name of the property you want to use as the\r\nbadge's content.\r\n\r\nExample:\r\n\r\n\tvar model = new Backbone.Model({item: 'tweets', count: 42});\r\n\tvar badge = new $$.Badge({model: model, content: 'count'}).render();\r\n\r\n#### BasicNavbar\r\n\r\nCreates a Bootstrap navbar whose buttons are model-bound.\r\nBy default, it will create a simple button for each element of the\r\nprovided Collection, using the model object's name, href, and label properties.\r\nFor example:\r\n\r\n\tvar items = new Backbone.Collection([\r\n\t\t{name: 'view', label: 'View', href: '#view'},\r\n\t\t{name: 'edit', label: 'Edit', href: '#edit'},\r\n\t\t{name: 'delete', label: 'Delete', href: '#delete'}\r\n\t]);\r\n\tvar navbar = new $$.BasicNavbar({brand: 'My App', model: items}).render();\r\n\r\ncreates a navbar with three buttons.\r\n\r\n#### Button\r\n\r\nCreates a Bootstrap button (a `button` tag with class=\"btn\") whose label is model-bound.\r\nYou can pass \"context\" and \"size\" attributes to define\r\nthe corresponding Bootstrap \"btn-*\" classNames.\r\n\r\nExample:\r\n\r\n\tvar model = new Backbone.Model({name: 'Submit'});\r\n\tvar button = new $$.Button({model: model, content: 'name'}).render();\r\n\t...\r\n\t// Alter the displayed label.\r\n\tmodel.set('name', 'Save as Draft');\r\n\r\n#### Calendar\r\n\r\nCreates a month calendar diplay with the bound date value highlighted.\r\nClicking on a date will set the Model's date to the chosen value.\r\n\r\nExample:\r\n\r\n\tvar model = new Backbone.Model({when: new Date()});\r\n\tvar cal = new $$.Calendar({model: model, content: 'when'}).render();\r\n\r\n#### Checkbox\r\n\r\nCreates a checkbox input.\r\nClicking on the checkbox will set or unset the Model's state\r\n\r\nExample:\r\n\r\n\tvar model = new Backbone.Model({state: true});\r\n\tvar input = new $$.Checkbox({model: model, content: 'state'}).render();\r\n\r\n#### Context\r\n\r\nCreates a `span` whose Bootstrap context-color is model-bound.\r\n\r\nA simple example - displays the text in a `span` with class \"text-info\":\r\n\r\n\tvar model = new Backbone.Model({context: 'info'});\r\n\tvar text = new $$.Context({model: model, content: 'context'}, 'This is some text').render();\r\n\r\nPassing `background: true` makes it use the \"bg-*\" classes instead of \"text-*\".\r\nYou can also pass it a \"tagName\" attribute to create something other than a `span`.\r\nThe value of \"content\" defaults to \"context\".\r\n\r\n#### DatePicker\r\n\r\nCombines a text box input with a Calendar component.\r\n\r\n#### Dropdown\r\n\r\nCreates a Bootstrap dropdown menu whose buttons are model-bound.\r\nBy default, it will create a simple button for each element of the\r\nprovided Collection, using the model object's label and href properties.\r\nAlso supports header and divider elements.\r\nFor example:\r\n\r\n\tvar items = new Backbone.Collection([\r\n\t\t{header: true, label: 'Operations'},\r\n\t\t{label: 'View', href: '#view'},\r\n\t\t{label: 'Edit', href: '#edit'},\r\n\t\t{divider: true},\r\n\t\t{label: 'Delete', href: '#delete'}\r\n\t]);\r\n\tvar dropdown = new $$.Dropdown({buttonLabel: 'File', model: items}).render();\r\n\r\ncreates a dropdown with a header and three buttons; the last button is below a divider.\r\nYou can also use a \"separator\" property - \"separator\" is a synonym for \"divider\".\r\n\r\n#### Glyph\r\n\r\nCreates a Bootstrap Glyphicon glyph (a `span` with class=\"glyphicon\") whose icon is model-bound.\r\n\r\nA simple example:\r\n\r\n\tvar model = new Backbone.Model({glyph: 'star'});\r\n\tvar glyph = new $$.Glyph({model: model, content: 'glyph'}).render();\r\n\t...\r\n\t// Alter the displayed icon.\r\n\tmodel.set('glyph', 'ok');\r\n\r\nGlyph is also smart enough to wrap your glyphicon in an outer `span`\r\nin order to properly implement \"size\" and \"context\" attributes.\r\n\r\n\tvar glyph = new $$.Glyph({content: 'star', size: 'large', context: 'danger'}).render();\r\n\r\nGives you a large red star (note that you can pass a literal value directly to content\r\ninstead of supplying a model object and property name.)\r\n\r\n#### Label\r\n\r\nCreates a Bootstrap label (a `label` tag with class=\"label\") whose label text is model-bound.\r\nYou can pass \"context\" and \"size\" attributes to define\r\nthe corresponding Bootstrap \"btn-*\" classNames.\r\n\r\n#### Link\r\n\r\nCreates a URL link (an `a` tag) whose label text is model-bound.\r\nYou can pass \"context\" and \"size\" attributes to define\r\nthe corresponding Bootstrap \"btn-*\" classNames.\r\n\r\n#### List\r\n\r\nCreates a simple list display of a Collection.\r\n\r\n#### Menu\r\n\r\nCreates a scrolling menu list whose value is taken from the bound Model\r\nand whose choices are taken from the bound Collection of alternatives.\r\n\r\nFor example:\r\n\tvar menu = new $$.Menu({\r\n\t\tmodel: new Backbone.Model({place: 'Alaska'}),\r\n\t\tcontent: 'place',\r\n\t\talternatives: new Backbone.Collection({\r\n\t\t\t{ id: 1, name: 'Alaska' },\r\n\t\t\t{ id: 2, name: 'Maine' },\r\n\t\t\t{ id: 3, name: 'Florida' },\r\n\t\t\t{ id: 4, name: 'Nevada' }\r\n\t\t}),\r\n\t\taltLabelContent: 'name',\r\n\t\taltValueContent: 'id'\r\n\t}).render();\r\n\r\naltValueContent defaults to altLabelContent.\r\n\r\n#### NavPills\r\n\r\nCreates a Bootstrap \"pills\" nav whose buttons are model-bound.\r\nBy default, it will create a simple button for each element of the\r\nprovided Collection, using the model object's name, href, and label properties.\r\nFor example:\r\n\r\n\tvar items = new Backbone.Collection([\r\n\t\t{name: 'view', label: 'View', href: '#view'},\r\n\t\t{name: 'edit', label: 'Edit', href: '#edit'},\r\n\t\t{name: 'delete', label: 'Delete', href: '#delete'}\r\n\t]);\r\n\tvar pills = new $$.NavPills({model: items}).render();\r\n\r\ncreates a set of three pills.\r\n\r\n#### NavTabs\r\n\r\nCreates a Bootstrap \"tabs\" nav whose buttons are model-bound.\r\nBy default, it will create a simple button for each element of the\r\nprovided Collection, using the model object's name, href, and label properties.\r\nFor example:\r\n\r\n\tvar items = new Backbone.Collection([\r\n\t\t{name: 'view', label: 'View', href: '#view'},\r\n\t\t{name: 'edit', label: 'Edit', href: '#edit'},\r\n\t\t{name: 'delete', label: 'Delete', href: '#delete'}\r\n\t]);\r\n\tvar tabs = new $$.NavTabs({model: items}).render();\r\n\r\ncreates a set of three tabs.\r\n\r\n#### ProgressBar\r\n\r\nProgressBar creates a Bootstrap \"progress\" div, with model-bound progress bar(s).\r\n\"Model\" property can be either a BackBone Model (for a single progress bar)\r\nor a BackBone.Collection for (multiple stacked progress bars).\r\nModel objects may contain context, min, max, labelled, and labelSuffix properties,\r\nin addition to a content property which should be numeric.\r\nMin and max default to 0 and 100; labelled defaults to false.\r\n\r\n#### RadioGroup\r\n\r\nCreates a group of radio buttons whose value is taken from the bound Model\r\nand whose choices are taken from the bound Collection of alternatives.\r\n\r\nFor example:\r\n\tvar menu = new $$.RadioGroup({\r\n\t\tmodel: new Backbone.Model({place: 'Alaska'}),\r\n\t\tcontent: 'place',\r\n\t\talternatives: new Backbone.Collection({\r\n\t\t\t{ id: 1, name: 'Alaska' },\r\n\t\t\t{ id: 2, name: 'Maine' },\r\n\t\t\t{ id: 3, name: 'Florida' },\r\n\t\t\t{ id: 4, name: 'Nevada' }\r\n\t\t}),\r\n\t\taltLabelContent: 'name',\r\n\t\taltValueContent: 'id'\r\n\t}).render();\r\n\r\naltValueContent defaults to altLabelContent.\r\n\r\n#### Table\r\n\r\nThe Backbone-UI TableView, decorated with Bootstrap classes.\r\nPass attributes to set the various table options available in Bootstrap:\r\n\tnew Table({\r\n\t\tstriped: true,\r\n\t\tbordered: true,\r\n\t\thover: true,\r\n\t\tcondensed: true,\r\n\t\tresponsive: true\r\n\t});\r\n\r\nwill give you a zebra-striped, bordered, condensed,\r\nresponsive table with hover highlighting.\t\r\n\r\n#### TextArea\r\n\r\nA model-bound textarea.\r\n\r\nExample:\r\n\r\n\tnew $$.TextArea({\r\n\t\tmodel: new Bakcbone.Model({ description: 'some text' }),\r\n\t\tcontent: 'description'\r\n\t}).render();\r\n\r\n#### TextField\r\n\r\nA model-bound text input.\r\n\r\nExample:\r\n\r\n\tnew $$.TextField({\r\n\t\tmodel: new Bakcbone.Model({ description: 'some text' }),\r\n\t\tcontent: 'description'\r\n\t}).render();\r\n\r\n#### TimePicker\r\n\r\nA text area with a dropdown list of times.\r\nDefaults to allowing choices in half-hour increments,\r\nwhich can be changed by setting the 'interval' option (in minutes).\r\n'Name' is the HTML name attribute for the form item.\r\nFormat defaults to 'hh:mm a'.\r\n\r\nExample:\r\n\r\n\tnew $$.TimePicker({\r\n\t\tname: 'startTime',\r\n\t\tinterval: 15,\r\n\t\tformat: 'hh:mm a',\r\n\t\tmodel: new Backbone.Model({ when: new Date() }),\r\n\t\tcontent: 'when'\r\n\t}).render();\r\n\r\n<script src=\"src/require.js\"></script>\r\n<script>\r\nrequire(['jquery', 'backbone', 'backstrap'], function($, Backbone, $$) {\r\n    $(\"head\").append($$.css(\"src/require.css\"));\r\n    $('body').append(\r\n        $$.jumbotron({\r\n            bgcontext: 'primary'\r\n        }, $$.p('Example message'))\r\n    );\r\n});\r\n</script>","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}